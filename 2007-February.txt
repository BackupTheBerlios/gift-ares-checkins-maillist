From nobody at sheep.berlios.de  Tue Feb 13 01:27:10 2007
From: nobody at sheep.berlios.de (mkern)
Date: Tue, 13 Feb 2007 01:27:10 +0100 (CET)
Subject: [Gift-ares-checkins] gift-ares/lib as_hashtable.c,1.9,1.10
Message-ID: <20070213002710.12EC1D7E13@mail.berlios.de>

Update of /cvsroot/gift-ares/gift-ares/lib
In directory sheep:/tmp/cvs-serv14790/lib

Modified Files:
	as_hashtable.c 
Log Message:
Cleanup which fixes some unknown memory bugs.

Index: as_hashtable.c
===================================================================
RCS file: /cvsroot/gift-ares/gift-ares/lib/as_hashtable.c,v
retrieving revision 1.9
retrieving revision 1.10
diff -u -d -r1.9 -r1.10
--- as_hashtable.c	4 Dec 2004 11:54:15 -0000	1.9
+++ as_hashtable.c	13 Feb 2007 00:25:39 -0000	1.10
@@ -588,85 +588,35 @@
 void as_hashtable_foreach (ASHashTable *table, ASHashTableForeachFunc func,
                            void *udata)
 {
-	ASHashTableEntry *e = NULL;
-    ASHashTableEntry *parent = NULL;
-    ASHashTableEntry *next;
-	ASHashTableEntry *remember_e = NULL, *remember_parent = NULL;
-	unsigned int index = table->tablelength;
-	unsigned int i, j,tablelength;
-	as_bool remove;
+	ASHashTableEntry **e;
+	unsigned int i;
 
     if (table->entrycount == 0)
 		return;
 
-	/* Needs a cleanup, but should work now. */
-
-    for (i = 0; i < table->tablelength; i++)
-    {
-        if (table->table[i])
-        {
-            e = table->table[i];
-            index = i;
-            break;
-        }
-    }
-
-	for (;;)
+	for (i = 0; i < table->tablelength; i++)
 	{
-		remove = func (e, udata);
+		e = &table->table[i];
 
-		if (remove)
+		while (*e)
 		{
-			if (!parent)
-				table->table[index] = e->next;
-			else
-				parent->next = e->next;
+			if (func (*e, udata))
+			{
+				/* Remove entry */
+				ASHashTableEntry *old = *e;
 
-			/* itr->e is now outside the hashtable */
-			remember_e = e;
-			table->entrycount--;
-			if (table->copy_keys)
-				free (remember_e->key);
+				*e = (*e)->next;
 	
-		    /* Advance the iterator, correcting the parent */
-			remember_parent = parent;
-		}
-
-		/* move on to next entry */
-		next = e->next;
-		if (next)
-		{
-	        parent = e;
-			e = next;
-
-			if (remove)
+				/* Free entry */
+				table->entrycount--;
+				if (table->copy_keys)
+					free (old->key);		
+				free (old);
+			}
+			else
 			{
-				if (parent == remember_e)
-					parent = remember_parent;
-				free (remember_e);
+				e = &((*e)->next);
 			}
-			continue;
-		}
-
-		tablelength = table->tablelength;
-		parent = NULL;
-
-		if (tablelength <= (j = ++(index)))
-			return;
-
-		while (!(next = table->table[j]))
-		{
-	        if (++j >= tablelength)
-				return;
-		}
-		index = j;
-		e = next;
-
-		if (remove)
-		{
-			if (parent == remember_e)
-				parent = remember_parent;
-			free (remember_e);
 		}
 	}
 }
@@ -677,52 +627,24 @@
 void *as_hashtable_find (ASHashTable *table, ASHashTableForeachFunc func,
                          void *udata)
 {
-	ASHashTableEntry *e = NULL;
-    ASHashTableEntry *parent = NULL;
-    ASHashTableEntry *next;
-    unsigned int index = table->tablelength;
-	unsigned int i, j,tablelength;
+	ASHashTableEntry *e;
+	unsigned int i;
 
     if (table->entrycount == 0)
 		return NULL;
 
-    for (i = 0; i < table->tablelength; i++)
-    {
-        if (table->table[i])
-        {
-            e = table->table[i];
-            index = i;
-            break;
-        }
-    }
-
-	for (;;)
+	for (i = 0; i < table->tablelength; i++)
 	{
-		if (func (e, udata))
-			return e->val;
-
-		/* move on to next entry */
-		next = e->next;
-		if (next)
+		while ((e = table->table[i]))
 		{
-	        parent = e;
-			e = next;
-			continue;
-		}
-		tablelength = table->tablelength;
-		parent = NULL;
-
-		if (tablelength <= (j = ++(index)))
-			return NULL;
+			if (func (e, udata))
+				return e->val;
 
-		while (!(next = table->table[j]))
-		{
-	        if (++j >= tablelength)
-				return NULL;
+			e = e->next;
 		}
-		index = j;
-		e = next;
 	}
+
+	return NULL;
 }
 
 /*****************************************************************************/



